import os
import csv
import json
import asyncio
from aiogram import Bot, Dispatcher, types
from telethon import TelegramClient
from datetime import datetime, timedelta
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, BufferedInputFile
import io
import random
from config import API_ID, API_HASH, API_TOKEN, PHONE
from models.model_sibiryak import generate_summary
from models.news_to_cloud import generate_word_cloud_image
from models.recsys_ml import generate_recommendations
from quotes_categories import QUOTES
from quotes_categories import category_to_channels
import time

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Telethon
api_id = API_ID
api_hash = API_HASH
phone = PHONE
client = TelegramClient('anon', api_id, api_hash)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã aiogram
API_TOKEN = API_TOKEN
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# CONSTS
USERS_AND_LINKS_DB = 'user_channels.json'
NEWS_CSV_PATH = 'news.csv'

# –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –±—É–¥—É—â–µ–π –±–∞–∑—ã —Å–æ —Å–≤—è–∑–∫–æ–π "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <> –µ–≥–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã"
if not os.path.exists(USERS_AND_LINKS_DB):
    with open(USERS_AND_LINKS_DB, 'w') as f:
        json.dump({}, f)

@dp.message()
async def handle_message(message: types.Message):
    if message.text.startswith("/start") or message.text.startswith("/help"):
        await send_welcome(message)
    elif message.text.startswith("https://t.me/"):
        await save_channel_link(message) 
    elif message.text == "üì∞ –°–∞–º–º–∞—Ä–∏ –º–æ–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ 24—á":
        await send_summary_to_user(message)
    elif message.text == "üåü –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤":
        await send_recommendations(message)
    elif message.text == "‚òÅÔ∏è –û–±–ª–∞–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º –ø–æ –º–æ–∏–º –Ω–æ–≤–æ—Å—Ç—è–º":
        await send_tags_cloud(message)
    elif message.text == "üìö –ú–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏":
        await send_user_channels(message)
    elif message.text.startswith("—É–¥–∞–ª–∏—Ç—å "):
        await remove_channel_by_number(message)
    elif message.text == "üèîÔ∏è –¶–∏—Ç–∞—Ç—ã –≤–µ–ª–∏–∫–∏—Ö –≤–æ—Å—Ö–æ–¥–∏—Ç–µ–ª–µ–π –≠–ª—å–±—Ä—É—Å–∞":
        await send_quote(message)
    else:
        await message.reply("–î—Ä—É–≥ –º–æ–π –ª—é–±–µ–∑–Ω—ã–π, –Ω–µ –ø–ª–æ–¥–∏ –ª–∏—à–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - –µ–µ –∏ —Ç–∞–∫ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤ —ç—Ç–æ–º –º–∏—Ä–µ. –î–∞–π —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª –∏–ª–∏ –ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –Ω–∏–∂–µ.")

# —Ñ—É–Ω–∫—Ü–∏—è-–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
async def send_welcome(message: types.Message):
    kb = [
        [types.KeyboardButton(text="üìö –ú–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"), types.KeyboardButton(text="üåü –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤")],
        [types.KeyboardButton(text="üì∞ –°–∞–º–º–∞—Ä–∏ –º–æ–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ 24—á")],
        [types.KeyboardButton(text="‚òÅÔ∏è –û–±–ª–∞–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º –ø–æ –º–æ–∏–º –Ω–æ–≤–æ—Å—Ç—è–º")],
        [types.KeyboardButton(text="üèîÔ∏è –¶–∏—Ç–∞—Ç—ã –≤–µ–ª–∏–∫–∏—Ö –≤–æ—Å—Ö–æ–¥–∏—Ç–µ–ª–µ–π –≠–ª—å–±—Ä—É—Å–∞")],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,

        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª'"
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π NewsBuddy - –±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π —Å–æ–±—Ä–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.\n\n"
                         "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –≤–∏–¥–∞ 'https://t.me/', –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –≤ —Å–≤–æ–µ–π –±–∞–∑–µ, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –¥–µ–ª–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–æ–π –¥–Ω—è.\n\n"
                         "–Ø –µ—â–µ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ñ–∞–∑–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –ø–æ—ç—Ç–æ–º—É —É–º–µ—Ä—å —Å–≤–æ–∏ –æ–∂–∏–¥–∞–Ω–∏—è :)", reply_markup=keyboard)


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–º–µ—à–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
async def send_quote(message: types.Message):
    quote = random.choice(QUOTES)
    await message.reply(quote)


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–µ—Ä–µ—á–µ–Ω—å –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
async def send_user_channels(message: types.Message):
    user_id = str(message.from_user.id)
    with open(USERS_AND_LINKS_DB, 'r') as f:
        data = json.load(f)
    user_channels = data.get(user_id, [])
    if user_channels:
        numbered_channels = "\n".join(f"{i}. {channel}" for i, channel in enumerate(user_channels, start=1))
        deletion_instruction = "\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–∫–æ–π-—Ç–æ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ –±–æ—Ç –∫–æ–º–∞–Ω–¥—É –≤–∏–¥–∞ '—É–¥–∞–ª–∏—Ç—å 1, 4, 12', –≥–¥–µ —á–∏—Å–ª–∞ - –Ω–æ–º–µ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤ –≤ —Å–ø–∏—Å–∫–µ –≤—ã—à–µ."
        await message.reply(numbered_channels + deletion_instruction) # TODO —É–±—Ä–∞—Ç—å –ø—Ä–µ–≤—å—é –≤ –≤—ã–¥–∞–≤–∞–µ–º–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –±–∞–∑—ã
async def remove_channel_by_number(message: types.Message):
    user_id = str(message.from_user.id)
    channel_numbers_str = message.text.replace("—É–¥–∞–ª–∏—Ç—å ", "")  # –£–¥–∞–ª—è–µ–º "—É–¥–∞–ª–∏—Ç—å " –∏–∑ —Å—Ç—Ä–æ–∫–∏
    
    with open(USERS_AND_LINKS_DB, 'r') as f:
        data = json.load(f)
    user_channels = data.get(user_id, [])
    
    # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–æ–º–µ—Ä–∞–º–∏ –ø–æ –∑–∞–ø—è—Ç–æ–π –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã
    channel_numbers_str_list = [num.strip() for num in channel_numbers_str.split(",")]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–∫–µ —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞–º–∏
    if all(num.isdigit() for num in channel_numbers_str_list):
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–∞ –∏ —É–º–µ–Ω—å—à–∞–µ–º –∏—Ö –Ω–∞ 1, —Ç–∞–∫ –∫–∞–∫ –Ω—É–º–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1
        channel_numbers = [int(num) - 1 for num in channel_numbers_str_list]
        
        removed_channels = []
        # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
        for channel_number in sorted(channel_numbers, reverse=True):  # –£–¥–∞–ª—è–µ–º —Å –∫–æ–Ω—Ü–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–º–µ—â–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
            if 0 <= channel_number < len(user_channels):
                removed_channels.append(user_channels[channel_number])  # –î–æ–±–∞–≤–ª—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫
                del user_channels[channel_number]
            else:
                await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞: {channel_number + 1}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
        
        data[user_id] = user_channels
        with open(USERS_AND_LINKS_DB, 'w') as f:
            json.dump(data, f)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ news.csv –Ω–æ–≤–æ—Å—Ç–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏
        try:
            with open('news.csv', 'r', newline='', encoding='utf-8') as csv_file:
                reader = csv.DictReader(csv_file)
                remaining_news = [row for row in reader if not (row['channel_name'] in removed_channels and row['user_id'] == user_id)]
        except FileNotFoundError:
            remaining_news = []
        
        with open('news.csv', 'w', newline='', encoding='utf-8') as csv_file:
            fieldnames = ['user_id', 'channel_name', 'publication_text', 'publication_link', 'publication_date']
            writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(remaining_news)

        await message.answer("–ö–∞–Ω–∞–ª—ã –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º–∏ –Ω–æ–≤–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ '—É–¥–∞–ª–∏—Ç—å', —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏.")

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –±–∞–∑—É —Å–æ —Å–≤—è–∑–∫–∞–º–∏ —Å—É—â–Ω–æ—Å—Ç–µ–π "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∫–∞–Ω–∞–ª—ã"
async def save_channel_link(message: types.Message):
    channel_link = message.text
    user_id = str(message.from_user.id)

    with open(USERS_AND_LINKS_DB, 'r') as f:
        data = json.load(f)
    
    user_channels = data.get(user_id, [])
    if channel_link in user_channels:  # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –µ–µ
        user_channels.remove(channel_link)
    user_channels.append(channel_link)  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
    data[user_id] = user_channels
    
    with open(USERS_AND_LINKS_DB, 'w') as f:
        json.dump(data, f)
    
    await message.reply("–ù–æ–≤–æ—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É.", parse_mode='Markdown')

# –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
# N_channels - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –ø–∞—Ä—Å–∏—Ç—å
# news_limit_per_channel - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∫–∞–∂–¥–æ–º –∫–∞–Ω–∞–ª–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
async def save_news(client, user_id, N_channels=3, news_limit_per_channel=10):
    start_time = time.time()
    print(f"Start saving news for user_id {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with open('user_channels.json', 'r') as f:
        user_channels = json.load(f).get(str(user_id), [])[-N_channels:]
    
    new_rows = []
    for channel_link in user_channels:
        entity = await client.get_entity(channel_link)
        async for msg in client.iter_messages(entity, limit=news_limit_per_channel):
            msg_date = msg.date.replace(tzinfo=None)
            last_news_link = f"https://t.me/{channel_link.split('/')[-1]}/{msg.id}"
            publication_text = msg.text.strip() if msg.text else ""
            if publication_text:
                new_rows.append({
                    'user_id': user_id,
                    'channel_name': channel_link,
                    'publication_text': publication_text,
                    'publication_link': last_news_link,
                    'publication_date': msg_date.strftime('%Y-%m-%d %H:%M:%S')
                })
    
    with open('news.csv', 'a', newline='', encoding='utf-8') as csv_file:
        fieldnames = ['user_id', 'channel_name', 'publication_text', 'publication_link', 'publication_date']
        writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
        writer.writerows(new_rows)
    print("Time taken for writing to CSV: %s seconds" % (time.time() - start_time))


# —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è news.csv - —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, –ø–∞—Ä—Å–∏—Ç –Ω–æ–≤—ã–µ —Å –ø–æ–º–æ—â—å—é –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ save_news
# N_channels - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –ø–∞—Ä—Å–∏—Ç—å
async def update_news_csv(user_id, N_channels=5):
    start_time = time.time()
    print(f"Updating news.csv for user_id {user_id}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º
    if os.path.exists('news.csv'):
        # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with open('news.csv', 'r', newline='', encoding='utf-8') as csv_file:
            reader = csv.DictReader(csv_file)
            remaining_news = [row for row in reader if row['user_id'] != str(user_id)]
    else:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        remaining_news = []
        # –∏ —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        with open('news.csv', 'w', newline='', encoding='utf-8') as csv_file:
            fieldnames = ['user_id', 'channel_name', 'publication_text', 'publication_link', 'publication_date']
            writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
            writer.writeheader()  # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    # –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
    with open('news.csv', 'w', newline='', encoding='utf-8') as csv_file:
        fieldnames = ['user_id', 'channel_name', 'publication_text', 'publication_link', 'publication_date']
        writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
        if not remaining_news:  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            writer.writeheader()
        writer.writerows(remaining_news)
    
    await save_news(client, user_id, N_channels=N_channels)
    print("Time taken for update_news_csv: %s seconds" % (time.time() - start_time))

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Ç–µ–º–∞–∫—Ç–∏–∫ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã—Ö –∏–º –∫–∞–Ω–∞–ª–æ–≤
async def send_recommendations(message: types.Message):
    start_time = time.time() # –æ—Ç–ª–∞–¥–∫–∞
    user_id = str(message.from_user.id)
    await update_news_csv(user_id, 5)  # –û–±–Ω–æ–≤–ª—è–µ–º news.csv –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ–±–ª–∞–∫–∞ —Ç–µ–≥–æ–≤ –ø–æ 5 –∫–∞–Ω–∞–ª–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = int(user_id)
    print("Time taken for update_news_csv: %s seconds" % (time.time() - start_time)) # –æ—Ç–ª–∞–¥–∫–∞
    start_time = time.time()  # Resetting start_time # –æ—Ç–ª–∞–¥–∫–∞
    

    recommended_channels = generate_recommendations(user_id, NEWS_CSV_PATH, category_to_channels)
    print("Time taken for generate_recommendations: %s seconds" % (time.time() - start_time)) # –æ—Ç–ª–∞–¥–∫–∞
    start_time = time.time()  # Resetting start_time # –æ—Ç–ª–∞–¥–∫–∞

    if not recommended_channels:
        print("No recommendations found for user_id:", user_id)
    if recommended_channels:
        recommended_channels_str = "\n".join(recommended_channels)
        await message.reply(f"–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –≤–∞—Å:\n{recommended_channels_str}")
    else:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∞—Å.")
    print("Time taken for sending message: %s seconds" % (time.time() - start_time)) # –æ—Ç–ª–∞–¥–∫–∞

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–ª–∞–∫–∞ —Ç–µ–≥–æ–≤ –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def send_tags_cloud(message: types.Message):
    start_time = time.time() # –æ—Ç–ª–∞–¥–∫–∞
    user_id = str(message.from_user.id)
    await update_news_csv(user_id, 5)  # –û–±–Ω–æ–≤–ª—è–µ–º news.csv –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ–±–ª–∞–∫–∞ —Ç–µ–≥–æ–≤ –ø–æ 5 –∫–∞–Ω–∞–ª–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    print("Time taken for update_news_csv: %s seconds" % (time.time() - start_time)) # –æ—Ç–ª–∞–¥–∫–∞
    start_time = time.time()  # Resetting start_time

    try:
        img = generate_word_cloud_image('news.csv', user_id)
        print("Time taken for generate_word_cloud_image: %s seconds" % (time.time() - start_time)) # –æ—Ç–ª–∞–¥–∫–∞
        start_time = time.time()  # Resetting start_time # –æ—Ç–ª–∞–¥–∫–∞

        if img:
            buffer = io.BytesIO(img.getvalue())  # –°–æ–∑–¥–∞–π—Ç–µ –±—É—Ñ–µ—Ä
            buffer.seek(0)  # –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –∫—É—Ä—Å–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ –∫ –Ω–∞—á–∞–ª—É —Ñ–∞–π–ª–∞
            await bot.send_photo(chat_id=message.chat.id, photo=BufferedInputFile(buffer.read(), filename="cloud.png"), caption="–û–±–ª–∞–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º")
        else:
            await message.reply("–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.")
        print("Time taken for sending message or image: %s seconds" % (time.time() - start_time))
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∞–º–º–∞—Ä–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_summary_to_user(message: types.Message):   
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –µ–º—É –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å
    # await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∫–∞–Ω–∞–ª–∞—Ö –∏ —Å–∞–º–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –º–Ω–æ–≥–æ. \n" # –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    #                     "–ü–æ–∫–∞ –≤—ã –∂–¥–µ—Ç–µ, —É–∑–Ω–∞–π—Ç–µ –º—É–¥—Ä–æ—Å—Ç—å –≤–æ—Å—Ö–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ –∫–Ω–æ–ø–∫–µ \n'üèîÔ∏è –¶–∏—Ç–∞—Ç—ã –≤–µ–ª–∏–∫–∏—Ö –≤–æ—Å—Ö–æ–¥–∏—Ç–µ–ª–µ–π –≠–ª—å–±—Ä—É—Å–∞'")

    user_id = str(message.from_user.id) # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_news_csv(user_id, 3)  # –û–±–Ω–æ–≤–ª—è–µ–º news.csv –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Å–≤–æ–¥–∫–∏ –ø–æ 3 –∫–∞–Ω–∞–ª–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    # –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è news.csv –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –¥–ª—è –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    summary_list = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∞–º–º–∞—Ä–∏

    with open('news.csv', 'r', newline='', encoding='utf-8') as csv_file:
        reader = csv.DictReader(csv_file)
        for row in reader:
            if row['user_id'] == str(user_id):  # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                publication_text = row['publication_text']
                publication_link = row['publication_link']
                summary = generate_summary(publication_text)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–º–∞—Ä–∏
                summary_with_link = f"{summary}\n[Link]({publication_link})" # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–º–∞—Ä–∏ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫
                summary_list.append(summary_with_link)
    if summary_list:
        summary_text = "\n\n---\n\n".join(summary_list)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
        for i in range(0, len(summary_text), 4096):
            await message.reply(
                summary_text[i:i+4096],
                parse_mode='Markdown'
            )
    else:
        await message.reply(
            "–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å.",
            parse_mode='Markdown'
        )

async def start_client_and_polling():
    await client.start()
    await dp.start_polling(bot)

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(start_client_and_polling())